// automatically generated by Xtext
grammar xtext.sales.assignment3.transaction.SalesTransaction with org.eclipse.xtext.common.Terminals

//import "http://www.sales.org/assignment2" 
import "platform:/resource/xtext.sales.assignment3/emf.assignment2/metamodel/assignment2.ecore" 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Company returns Company:
	'company'
	name=EString
	'{'
		('codice' codice=EString)?
		(address=Address)?
		'stores' '{' store+=Store ( "," store+=Store)* '}' 
		('transactions' '{' transaction+=Transaction ( "," transaction+=Transaction)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

Address returns Address:
	{Address}
	'address'
	'{'
		('street' street=EString)?
		('city' city=EString)?
		('country' country=EString)?
		('telephone' telephone=EString)?
	'}';

Store returns Store:
	{Store}
	'store'
	name=EString
	'{'
		('items' '{' item+=Item ( "," item+=Item)* '}' )?
	'}';

Transaction returns Transaction:
	'transaction'
	'{'
		('transactionNumber' transactionNumber=EString)?
		('issuedDate' issuedDate=EDate)?
		'transactionType' transactionType=TransactionType
		'paymentMethod' paymentMethod=PaymentMethod
		(customer=Customer)?
		(cashier=Cashier)?
		'lineItems' '{' lineItem+=LineItem ( "," lineItem+=LineItem)* '}' 
		(card=Card)?
	'}';

Item returns Item:
	'item'
	name=EString
	'{'
		('code' code=EString)?
		('batch' batch=EString)?
		('description' description=EString)?
		'uom' uom=UoM
		'availableNumber' availableNumber=EDouble
		'isActive' isActive=EBoolean
		'unitPrice' unitPrice=Price
	'}';

enum UoM returns UoM:
				PCS = 'PCS' | KG = 'KG' | LTR = 'LTR' | M = 'M';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

Price returns Price:
	'price'
	'{'
		'sellingPrice' sellingPrice=EDouble
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

enum TransactionType returns TransactionType:
				CashSales = 'CashSales' | CreditSales = 'CreditSales' | AdvancePaymentSales = 'AdvancePaymentSales';

enum PaymentMethod returns PaymentMethod:
				Cash = 'Cash' | Card = 'Card';

Customer returns Customer:
	{Customer}
	'customer'
	name=EString
	'{'
		('surName' surName=EString)?
		('identityNumber' identityNumber=EString)?
		('phoneNumber' phoneNumber=EString)?
		(card=[Card|EString])?
		(customer=Customer)?
		(cashier=Cashier)?
	'}';

Cashier returns Cashier:
	{Cashier}
	'cashier'
	name=EString
	'{'
		('surName' surName=EString)?
		('employeeId' employeeId=EString)?
		(customer=Customer)?
		(cashier=Cashier)?
	'}';

LineItem returns LineItem:
	'lineItem'
	'{'
		('code' code=EString)?
		'quantity' quantity=EDouble
		'item' item=[Item|EString]
		('tax' tax=Tax)?
		('discount' discount=Discount)?
		('additionalCharge' additionalCharge=AdditionalCharge)?
	'}';

Card returns Card:
	'card'
	'{'
		('cardNumber' cardNumber=EString)?
		('expiryDate' expiryDate=EString)?
		'cardHolder' cardHolder=[Customer|EString]
	'}';

Tax returns Tax:
	'tax'
	'{'
		'taxType' taxType=TaxType
		'taxableAmount' taxableAmount=EDouble
		'taxAmount' taxAmount=EDouble
	'}';

Discount returns Discount:
	'discount'
	'{'
		'percentage' percentage=EDouble
		'amount' amount=EDouble
	'}';

AdditionalCharge returns AdditionalCharge:
	'additionalCharge'
	'{'
		'serviceCharge' serviceCharge=EDouble
	'}';

enum TaxType returns TaxType:
				TaxExempt = 'TaxExempt' | IncomeTax = 'IncomeTax' | CorporateTax = 'CorporateTax' | VAT = 'VAT';
